<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Farlie's Blog]]></title>
  <link href="http://stevenfarlie.github.io/atom.xml" rel="self"/>
  <link href="http://stevenfarlie.github.io/"/>
  <updated>2014-04-04T15:06:05+11:00</updated>
  <id>http://stevenfarlie.github.io/</id>
  <author>
    <name><![CDATA[Steven Farlie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Gem Versions With Bundler]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/04/04/managing-gem-versions-with-bundler/"/>
    <updated>2014-04-04T14:03:17+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/04/04/managing-gem-versions-with-bundler</id>
    <content type="html"><![CDATA[<p>One of the common refrains for new Rubyists is &ldquo;How do I organise my Gemfile?&rdquo;.</p>

<p>The answer usually given is &ldquo;put in all your gem dependencies&rdquo; but that is a little simplistic. When teaching Ruby I usually find that the Gemfile is very easy for people to understand. The syntax is quite clean and straight-forward. That is, until you start dealing with gem versions and gem groups.</p>

<p>Let&rsquo;s start with the most common &lsquo;first Gemfile&rsquo; scenario: the stock Rails Gemfile (I have edited this to remove the comments and commented-out gems):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.4&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;turbolinks&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jbuilder&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:doc</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sdoc&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Gemfile vs Gemfile.lock</h2>

<p>It sounds unintuitive, but the Gemfile doesn&rsquo;t actually determine which gems your application will use. After <code>bundle</code> or <code>bundle install</code> is run, the Gemfile.lock file is created. This lock file determines the exact version of every gem your application will use. Not just the gems listed in Gemfile, but all the gems that they depend on as well.</p>

<p>This file is a bit larger, so I&rsquo;ll just show the start of the Gemfile.lock that was generated for the Rails example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GEM</span>
</span><span class='line'>  <span class="ss">remote</span><span class="p">:</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">/</span>
</span><span class='line'>  <span class="ss">specs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">actionmailer</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mail</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">actionpack</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">builder</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">erubis</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span><span class="o">-</span><span class="nb">test</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This specifies that <code>actionmailer</code> version 4.0.4 is used, as well as <code>actionpack</code> version 4.0.4. Every production and test server, every developer or CI environment will all use the exact gems specified in Gemfile.lock. It&rsquo;s a great solution to the problem of keeping every environment in sync with their gem versions.</p>

<p>So if Gemfile.lock specifies which gems your application uses, then what is the point of using Gemfile?</p>

<h2>bundle update and gem versions</h2>

<p>Gemfile&rsquo;s purpose is as a tool to manage your Gemfile.lock. With the <code>bundle update</code> command you can ask Bundler to regenerate the Gemfile.lock file. This is something that has to be done manually, ideally periodically, by someone with a good idea of how the whole app fits together.</p>

<p>The key to managing <code>bundle update</code> is to specify not the gem version that you develop against, but the gem version <em>you think should be compatible</em>. This means that when it comes time to <code>bundle update</code> the whole process should be relatively painless.</p>

<p>The two key concepts to manage gem versions is <a href="http://semver.org/">Semantic Versioning</a> and the <a href="http://robots.thoughtbot.com/rubys-pessimistic-operator">~> operator</a>. Take a moment to read up on both if you aren&rsquo;t familiar with them, because it&rsquo;s time to get real on that Gemfile.</p>

<h2>Gemfile revisited</h2>

<p>I don&rsquo;t like the stock Rails Gemfile. Aside from the fact that it doesn&rsquo;t work out of the box (the infamous &ldquo;Could not find a JavaScript runtime.&rdquo;), the version specifiers are all over the place. Let&rsquo;s lay down a few entirely arbitrary and made up ground rules:</p>

<ul>
<li>Big gems with lots of code can have unexpected bugs after releases. Things become hairy if your entire application is based off of it. So if you lack confidence in a particular library then the patch level is more appropriate: &ldquo;~> MAJOR.MINOR.PATCH&rdquo;, e.g. &ldquo;~> 2.4.1&rdquo;.</li>
<li>Regular gems that use semantic versioning are usually fine for MINOR versions, e.g. &ldquo;~> 2.4&rdquo;.</li>
<li>Gems used purely for debugging, development or testing do not affect production code, so limiting their version usually holds the project back. You can leave these without a version, so Bundler will always pick up the latest when you update.</li>
</ul>


<p>With that in mind let&rsquo;s have a stab at the Rails Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;turbolinks&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jbuilder&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:doc</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sdoc&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of these changes are judgement calls, but so long as you keep Gemfile.lock it is actually not much of an issue. Here are a few of the things I was thinking when making these changes:</p>

<ul>
<li>Rails is a big, complicated gem. But at the start of a project the codebase is usually quite small, with good test coverage and not many features. Sticking to MINOR version compatibility seems reasonable. If the application had 150 controllers and 400 models I would probably choose PATCH versions.</li>
<li>The &lsquo;uglifier&rsquo; and &lsquo;sqlite3&rsquo; gems are usually only used in development and testing, so I would allow any version. Similarly I left &lsquo;sdoc&rsquo; unversioned.</li>
</ul>


<p>That&rsquo;s it for now. Thanks for reading this far and best of luck taming your Gemfile! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Next: Commit Formatting]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/03/21/git-next-commit-formatting/"/>
    <updated>2014-03-21T10:21:25+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/03/21/git-next-commit-formatting</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a crazy ride for Git over the past six years. Without a doubt it is the number one source control system in the open source world. That would have seemed pretty crazy back in the day, considering almost no developers wanted to deal with branches and how utterly confounding the command line interface seems to be.</p>

<p>I am fortunate to experience most of the spectrum of Git users, thanks to both professional work in Ruby and volunteering at OpenTechSchool. Getting users up and running is relatively straight-forward. In an hour or two most can clone, add, commit, push and pull. It helps immensely that the <code>gitk</code> program is shipped with most git installations. It allows a graphical view of the entire history of the repository.</p>

<p><img src="http://stevenfarlie.github.io/images/posts/2014-04-21/gitk-01.png"></p>

<p>There are a few posts about what to do next, of various levels of expertise, and a good one just posted by Peter Hutterer which has <a href="http://who-t.blogspot.com.au/2014/03/using-git-next-level.html">some neat tips</a>. I thought I would bring it back to the very, very next step: formatting your commits for others.</p>

<p>This is actually the biggest step you can make it your git know-how. Running your own local repo is great for easy backups and deployments but eventually most of us will have to interact with others.</p>

<h2>He said, she said git repos.</h2>

<p>Something not often mentioned is what a git commit <em>means</em>. Everyone knows what a git commit <em>is</em>, a set of changes to some files, but what it <em>means</em> comes into play when dealing with others. Yes, you made some changes to some files, but should it be in a single commit, or three? Take the following example, where a programmer added a new web page in a TDD-style, running <code>git commit</code> to save their progress:</p>

<ul>
<li><code>added tests for the new page</code></li>
<li><code>new page</code></li>
<li><code>fix test</code></li>
<li><code>more tests</code></li>
<li><code>reformat page</code></li>
<li><code>new copy from Simon</code></li>
<li><code>fixed tests</code></li>
</ul>


<p>If this was your own repository it wouldn&rsquo;t be a problem. However share a repository with five or fifty other programmers and this can be real issue. Compare it to slightly more experienced git user:</p>

<ul>
<li><code>Added 'About Us' page</code></li>
</ul>


<p>Much much easier to understand what is going on at a glance.</p>

<h2>Cleaning up your changes</h2>

<p>Let&rsquo;s say you have the first version of that branch, with seven commits that could be rolled up into one. There are a few different ways to roll up your commits.</p>

<h3>git diff and apply</h3>

<p>The <code>git diff</code> command is a nifty way to bypass the repository history by exporting all changes as a text file (called a <em>patch</em>). When you look at the differences in gitk it is actually the output of <code>git diff</code>. Giving it a range of commits will cause it to &ldquo;roll-up&rdquo; all changes into a single patch file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff origin/master...master
</span><span class='line'><span class="gh">diff --git a/grep_calendar.rb b/grep_calendar.rb</span>
</span><span class='line'><span class="gh">index 7d2c4f9..8ec74dc 100644</span>
</span><span class='line'><span class="gd">--- a/grep_calendar.rb</span>
</span><span class='line'><span class="gi">+++ b/grep_calendar.rb</span>
</span><span class='line'><span class="gu">@@ -10,7 +10,7 @@ class GrepCalendar &lt; Sinatra::Base</span>
</span><span class='line'>   include Icalendar
</span><span class='line'>
</span><span class='line'>   set :public_folder, File.dirname(__FILE__) + &#39;/public&#39;
</span><span class='line'><span class="gd">-  set :show_exceptions, false</span>
</span><span class='line'><span class="gi">+  set :show_exceptions, true</span>
</span><span class='line'>
</span><span class='line'>   get &#39;/&#39; do
</span><span class='line'>     redirect &#39;/index.html&#39;
</span></code></pre></td></tr></table></div></figure>


<p>In this case I use <code>origin/master...master</code> to say &ldquo;all changes I have made to master in my repo&rdquo;. Using a shell redirect you can save these changes to a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git diff origin/master...master &gt; my-changes.patch
</span></code></pre></td></tr></table></div></figure>


<p>Now we can pretend that we did it all in a single commit from the first place using the git apply command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git reset --hard origin/master <span class="c"># discard all changes to master</span>
</span><span class='line'>HEAD is now at 90580de random commit message
</span><span class='line'><span class="nv">$ </span>git apply --3way my-changes.patch <span class="c"># apply my patch file</span>
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'><span class="c"># Changes to be committed:</span>
</span><span class='line'><span class="c">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># modified:   grep_calendar.rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you are free to build your <code>git commit</code> and continue. Generally speaking a <code>git reset --hard</code> is a very dangerous command. If you start your work in a branch, however, you would only need to <code>git checkout master</code> to apply your changes fresh to master, leaving the branch behind.</p>

<h3>git rebase -i</h3>

<p>The slightly more intimidating process is the <em>interactive rebase</em>, commonly known as &ldquo;OMG WTF AM I DOING EVERYTHING IS GOING TO DIE!!!!&rdquo;</p>

<p>It&rsquo;s not that bad! Basically, <code>git rebase -i</code> replays your changes from a particular point in time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git rebase -i origin/master
</span><span class='line'>pick a6db047 Show all exceptions
</span><span class='line'>pick c823c44 fix tests
</span><span class='line'>pick c6f4926 really fix the tests
</span><span class='line'>
</span><span class='line'><span class="c"># Rebase 90580de..c6f4926 onto 90580de</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Commands:</span>
</span><span class='line'><span class="c">#  p, pick = use commit</span>
</span><span class='line'><span class="c">#  r, reword = use commit, but edit the commit message</span>
</span><span class='line'><span class="c">#  e, edit = use commit, but stop for amending</span>
</span><span class='line'><span class="c">#  s, squash = use commit, but meld into previous commit</span>
</span><span class='line'><span class="c">#  f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message</span>
</span><span class='line'><span class="c">#  x, exec = run command (the rest of the line) using shell</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># These lines can be re-ordered; they are executed from top to bottom.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># However, if you remove everything, the rebase will be aborted.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Note that empty commits are commented out</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trickiest part for many seems to be using the text editor! If you are in Vim, press <code>i</code> to turn on &ldquo;Insert mode&rdquo; (where it acts like a normal editor).</p>

<p>The top of the file contains all the commits that will be replayed, and the bottom explains all the things you can do to them. Leave the first one as <code>pick</code>, and change all the others from <code>pick</code> to <code>squash</code>. This tells git that we want it to roll all the commits together.</p>

<p>When you are done, press the ESC key and then type <code>:wq</code> to save the changes and exit. Git will now replay the commits. When it has finished it will return you to an editor to edit the commit message for all the rolled-up commits.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This is a combination of 3 commits.</span>
</span><span class='line'><span class="c"># The first commit&#39;s message is:</span>
</span><span class='line'>Show all exceptions
</span><span class='line'>
</span><span class='line'><span class="c"># This is the 2nd commit message:</span>
</span><span class='line'>
</span><span class='line'>fix tests
</span><span class='line'>
</span><span class='line'><span class="c"># This is the 3rd commit message:</span>
</span><span class='line'>
</span><span class='line'>really fix the tests
</span><span class='line'>
</span><span class='line'><span class="c"># Please enter the commit message for your changes. Lines starting</span>
</span><span class='line'><span class="c"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span>
</span><span class='line'><span class="c"># Not currently on any branch.</span>
</span><span class='line'><span class="c"># You are currently editing a commit during a rebase.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Changes to be committed:</span>
</span><span class='line'><span class="c">#   (use &quot;git reset HEAD^1 &lt;file&gt;...&quot; to unstage)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#       modified:   grep_calendar.rb</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Untracked files:</span>
</span><span class='line'><span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#       my-changes.patch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, press <code>i</code> to turn on Insert mode, make all your changes and then press the ESC key and type <code>:wq</code> to quit.</p>

<p>Take a look at your repository with gitk. You can see that the commits are gone and replaced with a single rolled-up commit. Now you are ready to show they world your interesting and insightful code changes :)</p>

<h3>diff or rebase?</h3>

<p>The end result is the same, so often it does not matter which method you use. A rebase takes fewer steps, but a diff keeps a patch file around which can feel like a bit of a security blanket.</p>

<p>There is one exception though, and that is when a branch has grown to monstrous proportions. Sometimes they will have 15 or 30 commits, with many conflicts, rewrites and merges all over the place. In these cases a patch file can be easier to understand and a good &lsquo;get out of jail free&rsquo; card.</p>

<p>Now, show us all your lovely formatted git commits!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[That One Weird Difference Between {} and Do-end in Ruby]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/02/15/that-one-weird-difference-between-braces-and-do-end-in-ruby/"/>
    <updated>2014-02-15T12:42:52+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/02/15/that-one-weird-difference-between-braces-and-do-end-in-ruby</id>
    <content type="html"><![CDATA[<p>Earlier in the week I was in a TDD pairing session and we were looking at making some non-standard expectations on a Ruby error. We were using RSpec, and the <a href="https://www.relishapp.com/rspec/rspec-expectations/v/3-0/docs/built-in-matchers/raise-error-matcher#set-expectations-on-error-object-passed-to-block">documentation</a> mentions the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;#foo&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;raises NameError&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span> <span class="p">{</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">NameError</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Well that looks good,&rdquo; I said. &ldquo;We can just replace those curly braces with a do-end block. That&rsquo;ll look prettier and match our coding style which uses do-end for blocks with multiple lines.&rdquo; (For the sake of argument let&rsquo;s reuse the example.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;#foo&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;raises IOError&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">IOError</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Perfect! Now the test should fail because it does currently raise an error, but it doesn&rsquo;t raise the error we expect.&rdquo;</p>

<p>Except that the test didn&rsquo;t fail. It passed just fine. Scratching our heads it looked a little strange. Did we have the right version of RSpec? Yes we did. Hmmm&hellip;. put a <code>binding.pry</code> in there&hellip; nope, didn&rsquo;t even start <a href="https://github.com/pry/pry">pry</a>.</p>

<p>After a few minutes of this we changed the do-end back to curly braces and, what do you know, it worked!</p>

<p>Looking into it a little deeper with the <a href="https://github.com/whitequark/parser">parser</a> gem you can see what is going on here. Given a spec file like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;#foo&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;raises NameError {}-edition&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span> <span class="p">{</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">NameError</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;raises IOError do-end-edition&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">IOError</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get a parse tree (with LISP-style s-expressions) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">block</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:describe</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">str</span> <span class="s">&quot;#foo&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">args</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">begin</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">block</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:it</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">str</span> <span class="s">&quot;raises NameError {}-edition&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">block</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:expect</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">args</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">const</span> <span class="nv">nil</span> <span class="nv">:Object</span><span class="p">)</span> <span class="nv">:new</span><span class="p">)</span> <span class="nv">:foo</span><span class="p">))</span> <span class="nv">:to</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">block</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:raise_error</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">args</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">arg</span> <span class="nv">:error</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:expect</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">lvar</span> <span class="nv">:error</span><span class="p">))</span> <span class="nv">:to</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:be_a</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">const</span> <span class="nv">nil</span> <span class="nv">:NameError</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">block</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:it</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">str</span> <span class="s">&quot;raises IOError do-end-edition&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">block</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">block</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:expect</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">args</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">const</span> <span class="nv">nil</span> <span class="nv">:Object</span><span class="p">)</span> <span class="nv">:new</span><span class="p">)</span> <span class="nv">:foo</span><span class="p">))</span> <span class="nv">:to</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:raise_error</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">args</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">arg</span> <span class="nv">:error</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">send</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:expect</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">lvar</span> <span class="nv">:error</span><span class="p">))</span> <span class="nv">:to</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">send</span> <span class="nv">nil</span> <span class="nv">:be_a</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">const</span> <span class="nv">nil</span> <span class="nv">:IOError</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there is the issue. Curly braces have a higher precedence than do-end blocks. With curly braces the block was passed to <code>raise_error</code>.</p>

<p>To get the desired behaviour with do-end you need to override precedence with parentheses, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">it</span> <span class="s2">&quot;raises IOError do-end-edition&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">raise_error</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">IOError</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That actually looks really ugly which defeats the purpose. Just trust the docs and use curly braces! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nerdalicious #1]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/02/07/nerdalicious-number-1/"/>
    <updated>2014-02-07T16:18:40+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/02/07/nerdalicious-number-1</id>
    <content type="html"><![CDATA[<p>Picked up this handy link today while reading through the <a href="http://npmjs.org">npm</a> source: <a href="http://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Portable-Shell.html">Portable Shell Programming</a> from the GNU Autoconf manual. It&rsquo;s a neat guide to keeping your shell scripts compatible all the way back to 1977. Pretty neat!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun Friday #1]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/02/07/fun-friday-2014-02-07/"/>
    <updated>2014-02-07T12:37:40+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/02/07/fun-friday-2014-02-07</id>
    <content type="html"><![CDATA[<p>Every Friday I try to have a little programming fun. It might be some tools or some libraries or maybe just catching up on the blogs. I don&rsquo;t usually blog about it though and maybe I should&hellip;</p>

<h2>Enter The Matrix</h2>

<p>Today I started with <a href="https://help.ubuntu.com/lts/serverguide/lxc.html">LXC</a>, the lightweight container technology for Linux. The server guide from Ubuntu is very well written and a great introduction. With a basic Ubuntu 12.04 server install I had a container up and running first try, all installed and ready to go. Very impressive!</p>

<p>I would recommend giving LXC containers a try. Even if you aren&rsquo;t on Linux, and run a &ldquo;development&rdquo; VM or a &ldquo;server&rdquo; VM on OSX or Windows. If you&rsquo;ve ever had that problem of a giant complicated server that does four or five websites, plus some hacking around with disks and file sharing and all that junk then give it a go. It&rsquo;s a really neat way to split up a server without wasting much RAM or CPU.</p>

<p>Now let&rsquo;s just all forget that BSD and Solaris have had this for years&hellip;</p>

<h2>Yo-ho-ho</h2>

<p>The other challenge of the day was to go through some Node/Yeoman/Angular stuff from <a href="http://tylerhenkel.com/creating-apps-with-angular-and-node-using-yeoman/?utm_source=javascriptweekly&amp;utm_medium=email">this blog post</a> by Tyler Henkel.</p>

<p>So, yeah, Node. I was on Node maybe&hellip; three years ago? Aside from Yeoman nothing much seems to have changed. Express is still the big web framework and everything is dominated by callbacks and people arguing over the best way of handling callbacks. (Not that there is anything wrong with callbacks. One of my best friends is a callback.)</p>

<p>One of the most annoying parts of the Node/NPM installation is that it <a href="https://npmjs.org/doc/README.html">still recommends a single system-wide installation</a>. I have a long, long (omg so long) history dealing with projects have different runtimes. Ruby 1.8.7/1.9/2.0/2.1, Java 1.4/1.5/1.6/1.7. All of these usually have some compiled library that only works on a particular version. The strange thing is, it&rsquo;s actually really straight-forward to just install Node locally:</p>

<pre>
$ tar xzf node-v0.10.25.tar.gz 
$ cd node-v0.10.25
$ ./configure --prefix=~/.local/opt/node
$ make && make install
$ export PATH=$PATH:~/.local/opt/node/bin
</pre>


<p>Now you can <code>npm install -g</code> to your heart&rsquo;s content. Install new versions of Node whenever you want and keep the old ones. Just update your <code>$PATH</code> to match.</p>

<p>One of the big pluses in the Node world is the quality of their command-line tools. They have all the &ldquo;modern&rdquo; features like proper <code>--help</code> text and ANSI colour support, but <code>yo</code> (from Yeoman) goes another step ahead to have interactive prompts. The Javascript community is lucky in that they <em>do</em>  have to account for users who aren&rsquo;t intimately familiar with the command line. It&rsquo;s a very beginner-friendly place and I think there is a lot that other communities can learn.</p>

<p>Still, thanks but no thanks to callbacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep-calendar Lives! And a Rant]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/02/02/grep-calendar-lives/"/>
    <updated>2014-02-02T14:34:30+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/02/02/grep-calendar-lives</id>
    <content type="html"><![CDATA[<p>Today I finally pushed the reworking of <code>grep-calendar</code>. It&rsquo;s a web service that lets you grep your webcal feeds, removing the ones that you don&rsquo;t want. tl;dr you can find it <a href="http://grep-calendar.herokuapp.com/index.html">here</a>.</p>

<p>My girlfriend lives through her calendar. Having a travelling business and working odd hours means that it&rsquo;s really useful to know when her day is over. The problem is that her company software only gives a calendar feed for the entire company. So I get 10 employees worth of appointments showing up on my calendar. Not ideal. So I decided to write a little program that will filter out any non-girlfriend related items in the calendar. Just give <code>url=http://example.com/feed.ical</code> and <code>query=Girlfriend</code> and it returns ical events containing &lsquo;Girlfriend&rsquo;. Sorted.</p>

<p>To start, I did a little search and found the <a href="http://rubygems.org/gems/icalendar">ICalendar gem</a>. Fifteen minutes later I had a <a href="http://www.sinatrarb.com/">Sinatra</a> app on <a href="https://devcenter.heroku.com/">Heroku</a> working perfectly. I was so pleased with the result I showed my girl how clean my calendar is now.</p>

<p>That was the first mistake.</p>

<p>My girlfriend, also pleased as punch with the solution, shared it with everyone in her company. The instructions she gave were pretty straightforward: copy the URL, replace &ldquo;FirstName%20LastName&rdquo; with your own name, keeping the %20, and paste that url into your calendar. Now her employees are, in some cases, about as computer literate as our cat. So I say, &ldquo;well I could probably just put a nice web page in front of it to make it easy&rdquo;.</p>

<p>And that was my second mistake.</p>

<p>Of course, I could have just bashed out something without styling, using simple forms and whole-page refreshes. But no, single page apps are the shiny new thing. Plus they have been around for years now. They must be really mature and productive after all this time. Let&rsquo;s do AngularJS and Foundation.</p>

<p>And that was my third mistake.</p>

<p>Fifteen hours later, scraping in time here and there, I&rsquo;ve finally gotten the first version pushed. Web development feels so incredibly backward and hacky. It was obviously made up as we went along and takes a really long time to get something out that looks &ldquo;normal&rdquo;. By comparison, GUI toolkits can get consistent look and feel without requiring three wildly different languages, or an array of preprocessors, or entire re-implementation of the tech stack in order to get a test suite to run headless.</p>

<p>In the end I didn&rsquo;t even include a test suite outside of the core Ruby algorithm. It&rsquo;s just an absolute nightmare to test a page without having to fire up a whole web browser.</p>

<p>But in reality it was the little things. Like, trying to retrieve query parameters when in JS (I guess you have to parse them yourself?). Or how a big toolkit like Foundation provides a lot of form styling, but not a spinner, which is probably the most important visual feedback you can give.</p>

<p>I just find the web so disappointing. The things that could have been! <a href="http://www.w3.org/Submission/1996/1/WD-jsss-960822">Javascript Style Sheets!</a> Or even just stealing the layout concepts from GUI toolkits. The web was choking on semantic document layout for years before finally ditching it for grids.</p>

<p>There has been a lot of innovation in visual design on the web, I&rsquo;ll grant it that. But it just seems that unless you are a professional web designer you can&rsquo;t get very far. Why can&rsquo;t my girlfriend, who has maintained multiple Wordpress blogs, debug simple problems with her website? It&rsquo;s because there are just so many standards, so many concepts and so many moving parts to get a bit of text, a few images and a form onto someone&rsquo;s screen.</p>

<p>It&rsquo;s pretty disgraceful, the state of things. But you see it all through the industry. Every new layer you add is another layer between the professionals and the amateurs. Us pros do really well out of it. Pity it&rsquo;s so hard for everyone else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backing It Up With Rdiff-backup]]></title>
    <link href="http://stevenfarlie.github.io/blog/2013/12/24/backing-it-up-with-rdiff-backup/"/>
    <updated>2013-12-24T17:42:02+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2013/12/24/backing-it-up-with-rdiff-backup</id>
    <content type="html"><![CDATA[<p>I hate doing backups.</p>

<p>I hate thinking about losing data. I never really had much to keep until recently. Somehow I’ve managed to collect a few gigabytes here and there that, while I could live without it, memories would fade. I’ve had so many pleasant ones lately that I would rather keep them.</p>

<h2>Just shove it in the cloud!</h2>

<p>Well, is that really an option these days? Two years ago it was all the rage. Your data would never even touch your hard disk. How would you feel if your Google account was deleted, and you lost all access to your email history? I had a huge Google Reader history, and that’s all gone now.</p>

<p>Even a technically perfect cloud backup solution can still be taken away from you. Unless you physically hold the data in your hands, it’s not yours.</p>

<h2>A basic setup</h2>

<p>I have a USB hard disk, which I call <code>bananaboat</code>. It contains a single encrypted volume (created using the super-easy <a href="https://apps.ubuntu.com/cat/applications/precise/gnome-disk-utility/"><code>gnome-disks</code></a> program in Linux).</p>

<p>It took a bit of faffing about, but I figured out the <code>rdiff-backup</code> utility enough to get a basic script going here. It’s simple enough:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">BACKUP_PATH</span><span class="o">=</span>/media/swf/BANANABOAT/<span class="nv">$HOSTNAME</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d /media/swf/BANANABOAT <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">read</span> -e -i <span class="s2">&quot;rdiff-backup destination (e.g. bananaking.local::/media/swf/BANANABOAT/seagoat): &quot;</span> BACKUP_PATH
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>rdiff-backup -v5 --exclude-if-present .nobackup --include-globbing-filelist <span class="nv">$HOME</span>/.backup.<span class="nv">$HOSTNAME</span> / <span class="nv">$BACKUP_PATH</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Backup to a directory on the USB disk using the hostname of the machine (I have two machines, seagoat and bananaking).</li>
<li>Read from <code>$HOME/.backup.hostname</code> (e.g. <code>$HOME/.backup.seagoat</code>) for the list of directories to back up.</li>
<li>If I don’t want a particular directory backed up, I put a <code>.nobackup</code> file in it.</li>
</ul>


<p>Note that it really is powered by the backup file (<a href="https://github.com/stevenfarlie/dotfiles/blob/master/home/.backup.seagoat">example</a>). That contains the include/exclude list to use and if you aren’t careful it will back up everything. There are a lot of cache files and things you don’t really need to back up.</p>

<h2>Sharing and syncing</h2>

<p>I do have a couple of machines, and am often reformatting/reinstalling and trashing things. So I use the awesome <code>homeshick</code> utility to keep everything in sync. On Linux it is pretty easy: I put the backup executable in <code>$HOME/.local/bin</code>. I’m still an old fuddy-duddy, so I put my config files in <code>$HOME</code>. Hey, it’s a free world.</p>

<h2>tl;dr</h2>

<p>I’m pretty happy with the combination of <code>rdiff-backup</code> and <code>homeshick</code>. It lets me store and share my backup configuration while still keeping the backups themselves private and encrypted. I can delete files with impunity, because they’ll still be around in the backups if I ever really need them again. Cleaning up files is super easy when you know you can safely delete things.</p>

<p>It also gives a good starting point to using cloud backups, because rdiff-backups are so simple to understand. I wouldn’t recommend using cloud backups as your primary method. Instead, use them to backup your backups!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splunking Netstat]]></title>
    <link href="http://stevenfarlie.github.io/blog/2013/12/24/splunking-netstat/"/>
    <updated>2013-12-24T16:49:49+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2013/12/24/splunking-netstat</id>
    <content type="html"><![CDATA[<p>Recently I found myself doing a little capacity planning for a customer&rsquo;s web service. They were using <a href="http://unicorn.bogomips.org/">Unicorn</a>, which, although a perfectly serviceable webserver, has limitations on the number of HTTP requests it can service at one time. Unicorn uses a fixed process model and requires that the application completes requests quickly. If the application doesn&rsquo;t then Unicorn can quickly run out of processes to service new requests. The resulting behaviour is, erm, <em>undesirable</em>.</p>

<p>We need to keep on top of the Linux TCP stack to make sure that Unicorn is being used for what it is intended. Enter <a href="http://www.splunk.com/">Splunk</a>, the swiss-army chainsaw of log analysis. My customer uses it for basically everything. It&rsquo;s a very solid tool, but I found support for logging the Linux network stack to be very limited. <a href="http://apps.splunk.com/app/273/">Splunk App for Unix and Linux</a>, from what I could tell, basically just logged the output of the <code>netstat</code> command. You can see below that it isn&rsquo;t the most parseable output format:</p>

<pre><code>$ netstat --tcp --numeric-hosts --numeric-ports --timers
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer
tcp        0      0 127.0.0.1:57343         127.0.0.1:51172         ESTABLISHED off (0.00/0/0)
tcp        0      0 127.0.0.1:46408         127.0.0.1:8000          TIME_WAIT   timewait (22.15/0/0)
tcp        0      0 192.168.1.10:45374      74.125.31.125:5222      ESTABLISHED keepalive (28.56/0/0)
</code></pre>

<p>It would be great to have something a little more Splunk-friendly. For example key-value pairs are instantly recognisable by Splunk. Something like this would be great:</p>

<pre><code>protocol=tcp recv_q=0 send_q=0 local_address=127.0.0.1:57343 foreign_address=127.0.0.1:51172 state=ESTABLISHED timer=off countdown=0.00 retries=0 window_probes=0
protocol=tcp recv_q=0 send_q=0 local_address=127.0.0.1:46408 foreign_address=127.0.0.1:8000 state=WAIT timer=timewait countdown=22.15 retries=0 window_probes=0
protocol=tcp recv_q=0 send_q=0 local_address=192.168.1.10:45374 foreign_address=74.125.31.125:5222 state=ESTABLISHED timer=keepalive countdown=28.56 retries=0 window_probes=0
</code></pre>

<p>This is achievable with a little Python script I whipped up. It takes the output from the above <code>netstat</code> command and reformats it to be a little more Splunkable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">check_output</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">stdout</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="n">check_output</span><span class="p">([</span><span class="s">&quot;netstat&quot;</span><span class="p">,</span><span class="s">&quot;--tcp&quot;</span><span class="p">,</span><span class="s">&quot;--numeric-hosts&quot;</span><span class="p">,</span><span class="s">&quot;--numeric-ports&quot;</span><span class="p">,</span><span class="s">&quot;--timers&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;protocol&quot;</span><span class="p">,</span> <span class="s">&quot;recv_q&quot;</span><span class="p">,</span> <span class="s">&quot;send_q&quot;</span><span class="p">,</span> <span class="s">&quot;local_address&quot;</span><span class="p">,</span> <span class="s">&quot;foreign_address&quot;</span><span class="p">,</span> <span class="s">&quot;state&quot;</span><span class="p">,</span> <span class="s">&quot;timer&quot;</span><span class="p">,</span> <span class="s">&quot;countdown&quot;</span><span class="p">,</span> <span class="s">&quot;retries&quot;</span><span class="p">,</span> <span class="s">&quot;window_probes&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="n">output</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">values</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># The timers are packaged in (N/N/N) format so we need to break it up.</span>
</span><span class='line'>    <span class="n">timer_values</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&quot;()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">key_value</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span><span class="n">values</span><span class="p">[:</span><span class="mi">7</span><span class="p">]</span><span class="o">+</span><span class="n">timer_values</span><span class="p">):</span>
</span><span class='line'>        <span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;{0[0]}={0[1]} &quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key_value</span><span class="p">))</span>
</span><span class='line'>    <span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to get Splunk to recognise that each individual line from the script is an event. We could use the special sourcetype <code>__singleline</code>, but I prefer to put in new custom sourcetype called <code>netstat</code>. Then with a quick addition to <code>props.conf</code> we can get our events parsing correctly:</p>

<pre><code>[netstat]
SHOULD_LINEMERGE=false
</code></pre>

<p>Success! We can see our netstat events in Splunk:</p>

<p><img src="http://stevenfarlie.github.io/images/posts/2013-12-24-splunking-netstat/01.png"></p>

<p>You can see the &ldquo;Interesting Fields&rdquo; section has picked out all the fields we specified earlier. This allows for quick and easy searching and visualisation. For example a basic timechart:</p>

<p><img src="http://stevenfarlie.github.io/images/posts/2013-12-24-splunking-netstat/02.png"></p>

<p>There is one limitation here: each individual connection logs multiple events. It would be great if we could <em>bundle up</em> events relating to a connection to create one event for the lifecycle of the connection. We can do this in Splunk with the <a href="http://docs.splunk.com/Documentation/Splunk/6.0.1/SearchReference/Transaction">transaction</a> command. Bundle by <code>local_address</code> and <code>foreign_address</code> to isolate individual network connections. If you think that client port reuse is a significant concern, use the <code>maxpause</code> option to adjust how long Splunk will wait between events before starting a new transaction. The <code>transaction</code> command sets a useful <code>duration</code> field, which is the length of time the transaction was open. This can be used for a rough determination of TCP connection duration:</p>

<p><img src="http://stevenfarlie.github.io/images/posts/2013-12-24-splunking-netstat/03.png"></p>

<p>That&rsquo;s it for a basic integration of netstat into Splunk. It&rsquo;s pretty basic but it does what we want for now. Hardcore users will want to increase the performance significantly. Perhaps by indexing more aggressively and/or precalculating transactions.</p>

<p>Happy Splunking!</p>
]]></content>
  </entry>
  
</feed>
