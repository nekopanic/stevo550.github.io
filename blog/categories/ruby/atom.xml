<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Steven Farlie's Blog]]></title>
  <link href="http://stevenfarlie.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://stevenfarlie.github.io/"/>
  <updated>2014-04-25T15:47:15+10:00</updated>
  <id>http://stevenfarlie.github.io/</id>
  <author>
    <name><![CDATA[Steven Farlie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Good Friday]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/04/18/good-friday/"/>
    <updated>2014-04-18T18:19:16+10:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/04/18/good-friday</id>
    <content type="html"><![CDATA[<p>It&rsquo;s Easter time, and there is no better way to spend a little downtime than by formatting your computer and installing the latest Ubuntu release. Everyone is with me on that, right? Right?</p>

<p>Anyway, it&rsquo;s 14.04 LTS this time, the first long-term-support release in two years. Specifically, I&rsquo;ve switched to the Xubuntu variant, which uses XFCE as the desktop environment and not Unity.</p>

<p>Overall I am very impressed with the cut and polish of XFCE in Xubuntu. It&rsquo;s shiny, configurable and provides just enough functionality to allow any sane developer to set up a decent workflow. It&rsquo;s theWindows 7 of the Linux world (lol).</p>

<p>This also comes with a few changes to my normal apps. The main one being that I am back on Firefox. Even though I prefer Chrome for many things, they make strange user interface decisions like warning about developer mode every time you start, or confirming downloads for &ldquo;dangerous files&rdquo;. I get the feeling that Firefox is a little more on my side.</p>

<p>One thing you might have an issue with is compiling Ruby on 14.04. This is because there are some new versions of libraries that Ruby relies on and they haven&rsquo;t managed to put out a release to handle them just yet. If, like me, you use <code>rbenv</code> for all your Ruby goodness then you can use this <a href="https://github.com/sstephenson/ruby-build/issues/526">helpful patch</a>.</p>

<p>Seeing as I was busy formatting hard drives I took the opportunity to buy a new backup disk. Now I have replaced BANANABOAT with a 1TB portable hard-drive called LUMPYSPACE. As before, it&rsquo;s entirely encrypted, so it doesn&rsquo;t matter if I lose it somewhere or somebody nicks it.</p>

<p>Then for good luck I reworked all my major passwords for everything I could think of. New disk crypto passwords, all the major services and two-factor auth where possible. It was such a pain. Many sites do not validate for maximum password in the browser, and some (like Steam), accept a password on one interface and will not let you log in on others. The most infuriating seems to be GitHub at the moment, which seems to allow my password on web, but not git+ssh. Fortunately I use SSH keys. But it is super annoying.</p>

<p>Anyhow, everything seems to be settling down. Though nobody has reported account breaches from Heartbleed, I would recommend taking the opportunity to change your passwords. It feels much better to have a password manager (like KeepassX) and 32+ character passwords.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[That One Weird Difference Between {} and Do-end in Ruby]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/02/15/that-one-weird-difference-between-braces-and-do-end-in-ruby/"/>
    <updated>2014-02-15T12:42:52+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/02/15/that-one-weird-difference-between-braces-and-do-end-in-ruby</id>
    <content type="html"><![CDATA[<p>Earlier in the week I was in a TDD pairing session and we were looking at making some non-standard expectations on a Ruby error. We were using RSpec, and the <a href="https://www.relishapp.com/rspec/rspec-expectations/v/3-0/docs/built-in-matchers/raise-error-matcher#set-expectations-on-error-object-passed-to-block">documentation</a> mentions the following</p>

<p>``` ruby
describe &ldquo;#foo&rdquo; do
  it &ldquo;raises NameError&rdquo; do</p>

<pre><code>expect { Object.new.foo }.to raise_error { |error|
  expect(error).to be_a(NameError)
}
</code></pre>

<p>  end
end
```</p>

<p>&ldquo;Well that looks good,&rdquo; I said. &ldquo;We can just replace those curly braces with a do-end block. That&rsquo;ll look prettier and match our coding style which uses do-end for blocks with multiple lines.&rdquo; (For the sake of argument let&rsquo;s reuse the example.)</p>

<p>``` ruby
describe &ldquo;#foo&rdquo; do
  it &ldquo;raises IOError&rdquo; do</p>

<pre><code>expect { Object.new.foo }.to raise_error do |error|
  expect(error).to be_a(IOError)
end
</code></pre>

<p>  end
end
```</p>

<p>&ldquo;Perfect! Now the test should fail because it does currently raise an error, but it doesn&rsquo;t raise the error we expect.&rdquo;</p>

<p>Except that the test didn&rsquo;t fail. It passed just fine. Scratching our heads it looked a little strange. Did we have the right version of RSpec? Yes we did. Hmmm&hellip;. put a <code>binding.pry</code> in there&hellip; nope, didn&rsquo;t even start <a href="https://github.com/pry/pry">pry</a>.</p>

<p>After a few minutes of this we changed the do-end back to curly braces and, what do you know, it worked!</p>

<p>Looking into it a little deeper with the <a href="https://github.com/whitequark/parser">parser</a> gem you can see what is going on here. Given a spec file like this:</p>

<p>``` ruby
describe &ldquo;#foo&rdquo; do</p>

<p>  it &ldquo;raises NameError {}-edition&rdquo; do</p>

<pre><code>expect { Object.new.foo }.to raise_error { |error|
  expect(error).to be_a(NameError)
}
</code></pre>

<p>  end</p>

<p>  it &ldquo;raises IOError do-end-edition&rdquo; do</p>

<pre><code>expect { Object.new.foo }.to raise_error do |error|
  expect(error).to be_a(IOError)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>We get a parse tree (with LISP-style s-expressions) like this:</p>

<p>``` scheme
(block
  (send nil :describe</p>

<pre><code>(str "#foo"))
</code></pre>

<p>  (args)
  (begin</p>

<pre><code>(block
  (send nil :it
    (str "raises NameError {}-edition"))
  (args)
  (send
    (block
      (send nil :expect)
      (args)
      (send
        (send
          (const nil :Object) :new) :foo)) :to
    (block
      (send nil :raise_error)
      (args
        (arg :error))
      (send
        (send nil :expect
          (lvar :error)) :to
        (send nil :be_a
          (const nil :NameError))))))
(block
  (send nil :it
    (str "raises IOError do-end-edition"))
  (args)
  (block
    (send
      (block
        (send nil :expect)
        (args)
        (send
          (send
            (const nil :Object) :new) :foo)) :to
      (send nil :raise_error))
    (args
      (arg :error))
    (send
      (send nil :expect
        (lvar :error)) :to
      (send nil :be_a
        (const nil :IOError)))))))
</code></pre>

<p>```</p>

<p>And there is the issue. Curly braces have a higher precedence than do-end blocks. With curly braces the block was passed to <code>raise_error</code>.</p>

<p>To get the desired behaviour with do-end you need to override precedence with parentheses, like so:</p>

<p>``` ruby
  it &ldquo;raises IOError do-end-edition&rdquo; do</p>

<pre><code>expect { Object.new.foo }.to(raise_error do |error|
  expect(error).to be_a(IOError)
end)
</code></pre>

<p>  end
```</p>

<p>That actually looks really ugly which defeats the purpose. Just trust the docs and use curly braces! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep-calendar Lives! And a Rant]]></title>
    <link href="http://stevenfarlie.github.io/blog/2014/02/02/grep-calendar-lives/"/>
    <updated>2014-02-02T14:34:30+11:00</updated>
    <id>http://stevenfarlie.github.io/blog/2014/02/02/grep-calendar-lives</id>
    <content type="html"><![CDATA[<p>Today I finally pushed the reworking of <code>grep-calendar</code>. It&rsquo;s a web service that lets you grep your webcal feeds, removing the ones that you don&rsquo;t want. tl;dr you can find it <a href="http://grep-calendar.herokuapp.com/index.html">here</a>.</p>

<p>My girlfriend lives through her calendar. Having a travelling business and working odd hours means that it&rsquo;s really useful to know when her day is over. The problem is that her company software only gives a calendar feed for the entire company. So I get 10 employees worth of appointments showing up on my calendar. Not ideal. So I decided to write a little program that will filter out any non-girlfriend related items in the calendar. Just give <code>url=http://example.com/feed.ical</code> and <code>query=Girlfriend</code> and it returns ical events containing &lsquo;Girlfriend&rsquo;. Sorted.</p>

<p>To start, I did a little search and found the <a href="http://rubygems.org/gems/icalendar">ICalendar gem</a>. Fifteen minutes later I had a <a href="http://www.sinatrarb.com/">Sinatra</a> app on <a href="https://devcenter.heroku.com/">Heroku</a> working perfectly. I was so pleased with the result I showed my girl how clean my calendar is now.</p>

<p>That was the first mistake.</p>

<p>My girlfriend, also pleased as punch with the solution, shared it with everyone in her company. The instructions she gave were pretty straightforward: copy the URL, replace &ldquo;FirstName%20LastName&rdquo; with your own name, keeping the %20, and paste that url into your calendar. Now her employees are, in some cases, about as computer literate as our cat. So I say, &ldquo;well I could probably just put a nice web page in front of it to make it easy&rdquo;.</p>

<p>And that was my second mistake.</p>

<p>Of course, I could have just bashed out something without styling, using simple forms and whole-page refreshes. But no, single page apps are the shiny new thing. Plus they have been around for years now. They must be really mature and productive after all this time. Let&rsquo;s do AngularJS and Foundation.</p>

<p>And that was my third mistake.</p>

<p>Fifteen hours later, scraping in time here and there, I&rsquo;ve finally gotten the first version pushed. Web development feels so incredibly backward and hacky. It was obviously made up as we went along and takes a really long time to get something out that looks &ldquo;normal&rdquo;. By comparison, GUI toolkits can get consistent look and feel without requiring three wildly different languages, or an array of preprocessors, or entire re-implementation of the tech stack in order to get a test suite to run headless.</p>

<p>In the end I didn&rsquo;t even include a test suite outside of the core Ruby algorithm. It&rsquo;s just an absolute nightmare to test a page without having to fire up a whole web browser.</p>

<p>But in reality it was the little things. Like, trying to retrieve query parameters when in JS (I guess you have to parse them yourself?). Or how a big toolkit like Foundation provides a lot of form styling, but not a spinner, which is probably the most important visual feedback you can give.</p>

<p>I just find the web so disappointing. The things that could have been! <a href="http://www.w3.org/Submission/1996/1/WD-jsss-960822">Javascript Style Sheets!</a> Or even just stealing the layout concepts from GUI toolkits. The web was choking on semantic document layout for years before finally ditching it for grids.</p>

<p>There has been a lot of innovation in visual design on the web, I&rsquo;ll grant it that. But it just seems that unless you are a professional web designer you can&rsquo;t get very far. Why can&rsquo;t my girlfriend, who has maintained multiple Wordpress blogs, debug simple problems with her website? It&rsquo;s because there are just so many standards, so many concepts and so many moving parts to get a bit of text, a few images and a form onto someone&rsquo;s screen.</p>

<p>It&rsquo;s pretty disgraceful, the state of things. But you see it all through the industry. Every new layer you add is another layer between the professionals and the amateurs. Us pros do really well out of it. Pity it&rsquo;s so hard for everyone else.</p>
]]></content>
  </entry>
  
</feed>
